// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
}

enum RentalStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(STAFF)
  permissions Json?    @default("{\"canCreateRentals\":true,\"canProcessReturns\":true,\"canManageInventory\":false,\"canViewReports\":true}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rentals     Rental[]
  
  @@map("users")
}

model Customer {
  id                      String   @id @default(cuid())
  fullName                String
  contactNumber           String
  ghanaCardId             String
  ghanaCardCollected      Boolean  @default(false)
  ghanaCardCollectedDate  DateTime?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  rentals                 Rental[]
  
  @@map("customers")
}

model Rental {
  id                    String        @id @default(cuid())
  receiptNumber         String        @unique
  
  // Customer Information
  customerId            String
  customer              Customer      @relation(fields: [customerId], references: [id])
  
  // Rental Details
  depositAmount         Float         @default(1000)
  dailyRate             Float         @default(100)
  pickupDateTime        DateTime
  returnDateTime        DateTime?
  status                RentalStatus  @default(ACTIVE)
  
  // Calculations
  daysUsed              Int?
  totalCharge           Float?
  refundAmount          Float?
  additionalPayment     Float?
  
  // Rental Items (Multiple Moulds)
  items                 RentalItem[]
  
  // Metadata
  createdById           String
  createdBy             User          @relation(fields: [createdById], references: [id])
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  @@map("rentals")
  @@index([customerId])
  @@index([status])
}

model RentalItem {
  id          String    @id @default(cuid())
  rentalId    String
  rental      Rental    @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  mouldTypeId String
  mouldType   MouldType @relation(fields: [mouldTypeId], references: [id])
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  
  @@map("rental_items")
  @@index([rentalId])
  @@index([mouldTypeId])
}

model MouldType {
  id           String       @id @default(cuid())
  name         String       @unique
  quantity     Int          @default(0)
  available    Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  rentalItems  RentalItem[]
  
  @@map("mould_types")
}

